!SLIDE

# 研究にまつわるエトセトラ

!SLIDE

# 今回の話

- 研究における環境構築とかの泥臭い部分
- 主にデータベースの話
- 技術的に新しいことは特にありません
- どちらかというと哀しい話
- どうしてこうなった

!SLIDE

# 大学で何やってたの？

- 自然言語処理に関する研究

  日本語とか英語とか、人が扱う言語を研究対象にする
- 例えば検索に関する研究とか
- 大量のデータを扱う必要がある

!SLIDE

# もちろんデータベースが必要

- 単語の出現頻度の統計をとったり
- レコード数が数億とかになったり
- データベース使わないとやってられない

!SLIDE

# 数億レコードをDBに入れるまでが大変

!SLIDE

# どういう処理をしたか

- 10万件のHTMLから
- 100万単語を取り出して
- 3億件の単語の組み合わせを数える
- ちなみに MySQL

!SLIDE

# 最初の方法

- 単語テーブルと単語組テーブルを用意
- INSERT or UPDATE を順次実行

!SLIDE

# ぜんぜん駄目

- UPDATE が非常に遅い
- UPDATE の割合が増えるにつれ速度が急激に低下

!SLIDE

# 二つ目の方法

- とりあえず一旦 INSERT
- 後からグルーピングしてまとめる

!SLIDE

# やっぱり駄目

- 1000万件を超えた辺りで INSERT の速度が急激に低下
- 使い物にならない

!SLIDE

# 三つ目の方法

- MySQL の Merge 機能を使おう
- 複数のテーブルを一つのテーブルとして扱う
- SELECT や ID の auto increment も管理
- 件数が増えたらテーブルを増やして対応

!SLIDE

# なんとか使い物になる

- でも INSERT はまだまだ遅い
- そもそも DB に一時的に保存する必要があるのか

!SLIDE

# 最終的に

- 連想配列にデータを溜め込む

  スワップが発生しない程度に
- テキストファイルに書き出す
- sort コマンドの merge 機能を活用
  <pre><code>
  % sort hoge.txt -o hoge.txt
  % sort fuga.txt -o fuga.txt
  % sort -m hoge.txt fuga.txt -o hago.txt
  </code></pre>

- 巨大なテキストファイルが完成する
- 完成した時点で DB に突っ込めばいい

!SLIDE

# まとめ

- こんな不毛なことをしてはいけません
- それ KVS で(ry
- MySQL は投げ捨てましょう
